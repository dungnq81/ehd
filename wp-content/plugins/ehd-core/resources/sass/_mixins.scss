@use "sass:list";
@use "sass:math";

/** */
$unique_id: unique_id();

/// Absolutely centers the element inside of its first non-static parent,
/// @link http://www.sitepoint.com/centering-with-sass/ Centering With Sass
@mixin absolute-center {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
}

@mixin fixed-center {
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
}

@mixin absolute-full {
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    position: absolute;
}

@mixin fixed-full {
    left: 0;
    top: 0;
    bottom: 0;
    right: 0;
    position: fixed;
}

/** */
@mixin keyframes($name) {
    @-webkit-keyframes #{$name} {
        @content;
    }
    @-moz-keyframes #{$name} {
        @content;
    }
    @keyframes #{$name} {
        @content;
    }
}

/** */
@mixin responsive-bg-ratio($image-width: 204, $image-height: 81) {
    background-size: cover;
    background-position: center;
    display: block;
    height: 0;
    padding-bottom: percentage(math.div($image-height, $image-width));

    @supports (aspect-ratio: 1 / 1) {
        aspect-ratio: list.slash($image-width, $image-height);
    }
}

@mixin responsive-wrapper($width: 100%) {
    position: relative;
    display: block;
    overflow: hidden;
    transition: all 0.3s ease-in-out;
    width: $width;
    & > img {
        display: block;
        height: 100% !important;
        width: auto;
        min-width: 100%;
        max-width: unset;
        object-fit: cover;
        object-position: center;
        @include absolute-center;
    }
}

@mixin responsive-scale($scale: 1.06, $opacity: 0.95) {
    transform: scale(1.0001);
    will-change: transform;
    transition: transform 0.8s cubic-bezier(0.25, 0.46, 0.45, 0.94), opacity 0.3s;
    &:hover {
        transform: scale($scale);
        opacity: $opacity;
    }
}

@mixin responsive-image-auto {
    height: auto !important;
    width: auto !important;
    object-fit: contain;
    max-width: 100%;
    max-height: 100%;
    min-width: 80%;
    min-height: 80%;
}

@mixin responsive-ratio($ratio-width: 3, $ratio-height: 2, $pseudo: false, $width_percent: 100%) {
    $padding_bottom: math.div($width_percent * $ratio-height, $ratio-width);
    @if $pseudo {
        &::before {
            content: '';
            position: relative;
            padding-bottom: $padding_bottom;
        }
    } @else {
        height: 0;
        padding-bottom: $padding_bottom;
    }

    width: $width_percent;
    @supports (aspect-ratio: 3 / 2) {
        aspect-ratio: list.slash($ratio-width, $ratio-height);
    }
}

@mixin grid-x {
    display: flex;
    flex-flow: row wrap;
}

@mixin grid-y {
    display: flex;
    flex-flow: column nowrap;
}

@mixin cell($width: 100%) {
    flex: 0 0 auto;
    min-height: 0;
    min-width: 0;
    @if $width != false {
        width: $width;
    }
}

/** */
@mixin flex-align-center {
    display: flex;
    align-items: center;
}

@mixin flex-justify-center {
    display: flex;
    justify-content: center;
}

@mixin flex-center {
    display: flex;
    align-items: center;
    justify-content: center;
}

@mixin flex-shrink {
    flex: 0 0 auto;
    max-width: 100%;
}

@mixin flex-auto {
    flex: 1 1 0;
    min-width: 0;
}

/** fixed */
@mixin flex-space-between {
    display: flex;
    justify-content: space-between;
}

@mixin flex-space-evenly {
    display: flex;
    justify-content: space-evenly;
}

@mixin flex-space-around {
    display: flex;
    justify-content: space-around;
}

/** */
@mixin list-reset($margin: 0, $padding: 0) {
    margin: $margin;
    padding: $padding;
    list-style: none;
}

/** functions to urlencode the svg string*/
@function str-replace($string, $search, $replace: '') {
    $index: str-index($string, $search);
    @if $index {
        @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
    }
    @return $string;
}

@function url-encode($string) {
    $map: (
            "%": "%25",
            "<": "%3C",
            ">": "%3E",
            " ": "%20",
            "!": "%21",
            "*": "%2A",
            "'": "%27",
            '"': "%22",
            "(": "%28",
            ")": "%29",
            ";": "%3B",
            ":": "%3A",
            "@": "%40",
            "&": "%26",
            "=": "%3D",
            "+": "%2B",
            "$": "%24",
            ",": "%2C",
            "/": "%2F",
            "?": "%3F",
            "#": "%23",
            "[": "%5B",
            "]": "%5D"
    );
    $new: $string;
    @each $search, $replace in $map {
        $new: str-replace($new, $search, $replace);
    }
    @return $new;
}

/** $string - svg */
@function inline-svg($string) {
    @return url('data:image/svg+xml;utf8,#{url-encode($string)}');
}

/** add unique id image url */
@function inline-image($url) {
    @return url("#{$url}?v=#{$unique_id}");
}

/** https://github.com/pentzzsolt/sass-is-int/blob/master/_is-int.scss */
@function is-int($value) {
    @if type-of($value) != number {
        //@warn '`#{$value}` is not a valid number!';
        @return null;
    }
    @return round($value) == $value;
}
