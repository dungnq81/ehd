@use "sass:list";
@use "sass:math";

@import "mixins";

@mixin flex-self($total: 1, $n: 1, $gap: false) {
    @if type-of($gap) == bool {
        $gap: 0;
    }
    @if is-int($total) and is-int($n) and $n > 0 {
        @if $total == $n {
            width: percentage(1);
        } @else if 0 == $gap and $total > $n {
            width: percentage(divide($n, $total));
        } @else if is-int($gap) and $total > $n {
            width: subtract(percentage(divide($n, $total)), fs(($total - $n) * divide($gap, $total)));
        }
    }
}

@mixin media-flex-self($m: 1, $t: false, $d: false, $gap_m: false, $gap: false) {
    @if is-int($m) and $m > 0 {
        @include flex-self($m, 1, $gap_m);
    }
    @if is-int($t) and $t > 0 {
        @include mq-min(tablet) {
            @include flex-self($t, 1, $gap);
        }
    }
    @if is-int($d) and $d > 0 {
        @include mq-min(desktop) {
            @include flex-self($d, 1, $gap);
        }
    }
}

@mixin flex-layout($m: 1, $t: false, $d: false, $gap_m: false, $gap: false, $class_cell: '.cell') {
    @include media-gap($gap_m, $gap, false);

    & > #{unquote($class_cell)} {
        @if '.cell' != $class_cell {
            @include cell(false);
        }

        @include media-flex-self($m, $t, $d, $gap_m, $gap);
    }
}

@mixin cell($w: 100%) {
    flex: 0 0 auto;
    min-height: 0;
    min-width: 0;

    @if type-of($w) != bool {
        width: fs($w);
    }
}

@mixin flex-container($padding_m: $gutter-xs, $padding: $gutter, $xxl: false, $xxxl: false) {
    margin-left: auto;
    margin-right: auto;

    &:not(.full) {

        @if is-int($padding_m) or unit($padding_m) == '%' {
            padding-left: fs($padding_m);
            padding-right: fs($padding_m);
        }

        // tablet breakpoint
        @if is-int($padding) or unit($padding) == '%' {
            @include mq-min(tablet) {
                padding-left: fs($padding);
                padding-right: fs($padding);
            }
        }

        // sm breakpoint
        @include mq-min(sm) {
            max-width: map-get($container-max-widths, sm);
        }

        // md breakpoint
        @include mq-min(md) {
            max-width: map-get($container-max-widths, md);
        }

        // lg breakpoint
        @include mq-min(lg) {
            max-width: map-get($container-max-widths, lg);
        }

        // xl breakpoint
        @include mq-min(xl) {
            max-width: map-get($container-max-widths, xl);
        }

        // xxl breakpoint
        @if true == $xxl {
            @include mq-min(xxl) {
                max-width: map-get($container-max-widths, xxl);
            }
        }

        // xxxl breakpoint
        @if true == $xxxl {
            @include mq-min(xxxl) {
                max-width: map-get($container-max-widths, xxxl);
            }
        }
    }
}

@mixin flex-x($reverse: false) {
    display: flex;

    @if false == $reverse {
        flex-flow: row wrap;
    } @else {
        flex-flow: row-reverse wrap;
    }
}

@mixin flex-y($reverse: false) {
    display: flex;

    @if false == $reverse {
        flex-flow: column nowrap;
    } @else {
        flex-flow: column-reverse wrap;
    }
}

@mixin flex-padding-x($padding_m: $gutter-xs, $padding: $gutter, $class_cell: '.cell') {
    @include mx-gutter($padding_m, $padding);

    & > #{unquote($class_cell)} {
        @if '.cell' != $class_cell {
            @include cell();
        }

        @include px-gutter($padding_m, $padding);
    }
}

@mixin flex-padding-y($padding_m: $gutter-xs, $padding: $gutter, $class_cell: '.cell') {
    @include my-gutter($padding_m, $padding);

    & > #{unquote($class_cell)} {
        @if '.cell' != $class_cell {
            @include cell();
        }

        @include py-gutter($padding_m, $padding);
    }
}

@mixin flex-align-center( $direction_column: false ) {
    display: flex;
    align-items: center;

    @if true ==  $direction_column {
        flex-direction: $direction_column;
    }
}

@mixin flex-center( $direction_column: false ) {
    display: flex;
    align-items: center;
    justify-content: center;

    @if true == $direction_column {
        flex-direction: $direction_column;
    }
}

@mixin inline-flex-center( $direction_column: false ) {
    display: inline-flex;
    align-items: center;
    justify-content: center;

    @if true == $direction_column {
        flex-direction: $direction_column;
    }
}

@mixin flex-shrink {
    flex: 0 0 auto;
}

@mixin flex-auto {
    flex: 1 1 0;
}
