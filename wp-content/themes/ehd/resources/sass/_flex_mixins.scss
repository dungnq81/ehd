@use "sass:list";
@use "sass:math";

@import "mixins";

@mixin flex-self($total: 1, $n: 1, $gap: false) {
    @if type-of($gap) == bool {
        $gap: 0;
    }
    @if is-int($total) and is-int($n) and $n > 0 {
        @if $total == $n {
            width: percentage(1);
        } @else if 0 == $gap and $total > $n {
            width: percentage(divide($n, $total));
        } @else if is-int($gap) and $total > $n {
            width: calc(#{percentage(divide($n, $total))} - #{fs(($total - $n) * divide($gap, $total))});
        }
    }
}

@mixin media-flex-self($m: 1, $t: false, $d: false, $gap_m: false, $gap: false) {
    @if is-int($m) and $m > 0 {
        @include flex-self($m, 1, $gap_m);
    }
    @if is-int($t) and $t > 0 {
        @include mq-min(mobile) {
            @include flex-self($t, 1, $gap);
        }
    }
    @if is-int($d) and $d > 0 {
        @include mq-min(desktop) {
            @include flex-self($d, 1, $gap);
        }
    }
}

@mixin flex-layout($m: 1, $t: false, $d: false, $gap_m: false, $gap: false, $class_cell: '.cell') {
    @include media-gap($gap_m, $gap, false);
    & > #{unquote($class_cell)} {
        @if '.cell' != $class_cell {
            @include cell(false);
        }
        @include media-flex-self($m, $t, $d, $gap_m, $gap);
    }
}

@mixin gap($x: false, $y: $x) {
    @if ($x == $y) and (type-of($x) != bool) {
        grid-gap: fs($x);
        gap: fs($x);
    } @else if ($x != $y) and (type-of($x) != bool) and (type-of($y) != bool) {
        grid-gap: fs($x) fs($y);
        gap: fs($x) fs($y);
    }
}

@mixin media-gap($m: false, $t: false, $d: false) {
    @include gap($m);
    @if type-of($t) != bool {
        @include mq-min(mobile) {
            @include gap($t);
        }
    }
    @if type-of($d) != bool {
        @include mq-min(desktop) {
            @include gap($d);
        }
    }
}

@mixin cell($w: 100%) {
    flex: 0 0 auto;
    min-height: 0;
    min-width: 0;

    @if type-of($w) != bool {
        width: fs($w);
    }
}

@mixin right-fullwidth($padding_m: 10, $padding: 15, $grid_extra: false, $widescreen: false) {
    margin: 0 0 0 auto;
    max-width: calc(50% + #{divide($global-screen, 2)});

    @if is-int($padding_m) or unit($padding_m) == '%' {
        padding-left: fs($padding_m);
    }

    @if is-int($padding) or unit($padding) == '%' {
        @include mq-min(mobile) {
            padding-left: fs($padding);
        }
    }

    @if true == $grid_extra {
        @include mq-min(xxdesktop) {
            max-width: calc(50% + #{divide($global-screen-large, 2)});
        }
    }

    @if true == $widescreen {
        @include mq-min(xxxdesktop) {
            max-width: 100%;
            padding-left: fs($large_gutter + $gutter);
        }
    }

    @include mq-max(xxdesktop) {
        max-width: calc(50% + #{divide($global-screen-medium, 2)});
    }
}

@mixin left-fullwidth($padding_m: 10, $padding: 15, $grid_extra: false, $widescreen: false) {
    margin: 0 auto 0 0;
    max-width: calc(50% + #{divide($global-screen, 2)});

    @if is-int($padding_m) or unit($padding_m) == '%' {
        padding-right: fs($padding_m);
    }

    @if is-int($padding) or unit($padding) == '%' {
        @include mq-min(mobile) {
            padding-right: fs($padding);
        }
    }

    @if true == $grid_extra {
        @include mq-min(xxdesktop) {
            max-width: calc(50% + #{divide($global-screen-large, 2)});
        }
    }

    @if true == $widescreen {
        @include mq-min(xxxdesktop) {
            max-width: 100%;
            padding-right: fs($large_gutter + $gutter);
        }
    }

    @include mq-max(xxdesktop) {
        max-width: calc(50% + #{divide($global-screen-medium, 2)});
    }
}

@mixin flex-container($padding_m: 10, $padding: 15, $width_extra: false, $widescreen: false) {
    margin-left: auto;
    margin-right: auto;

    &:not(.full) {
        max-width: $global-screen;

        @if is-int($padding_m) or unit($padding_m) == '%' {
            padding-left: fs($padding_m);
            padding-right: fs($padding_m);
        }

        @if is-int($padding) or unit($padding) == '%' {
            @include mq-min(mobile) {
                padding-left: fs($padding);
                padding-right: fs($padding);
            }
        }

        @if true == $width_extra {
            @include mq-min(xxdesktop) {
                max-width: $global-screen-large;
            }
        }

        @if true == $widescreen {
            @include mq-min(xxxdesktop) {
                max-width: 100%;
                padding-left: fs($large_gutter + $gutter);
                padding-right: fs($large_gutter + $gutter);
            }
        }

        @include mq-max(xxdesktop) {
            max-width: $global-screen-medium;
        }
    }
}

@mixin flex-x($reverse: false) {
    display: flex;

    @if false == $reverse {
        flex-flow: row wrap;
    } @else {
        flex-flow: row-reverse wrap;
    }
}

@mixin flex-y($reverse: false) {
    display: flex;

    @if false == $reverse {
        flex-flow: column nowrap;
    } @else {
        flex-flow: column-reverse wrap;
    }
}

@mixin flex-padding-x($padding_m: 10, $padding: 15, $class_cell: '.cell') {
    @include mx-gutter($padding_m, $padding);
    & > #{unquote($class_cell)} {
        @if '.cell' != $class_cell {
            @include cell();
        }

        @include px-gutter($padding_m, $padding);
    }
}

@mixin flex-padding-y($padding_m: 10, $padding: 15, $class_cell: '.cell') {
    @include my-gutter($padding_m, $padding);
    & > #{unquote($class_cell)} {
        @if '.cell' != $class_cell {
            @include cell();
        }
        @include py-gutter($padding_m, $padding);
    }
}

@mixin flex-align-center( $direction_column: false ) {
    display: flex;
    align-items: center;

    @if true ==  $direction_column {
        flex-direction: $direction_column;
    }
}

@mixin flex-center( $direction_column: false ) {
    display: flex;
    align-items: center;
    justify-content: center;

    @if true == $direction_column {
        flex-direction: $direction_column;
    }
}

@mixin inline-flex-center( $direction_column: false ) {
    display: inline-flex;
    align-items: center;
    justify-content: center;

    @if true == $direction_column {
        flex-direction: $direction_column;
    }
}

@mixin flex-shrink {
    flex: 0 0 auto;
}

@mixin flex-auto {
    flex: 1 1 0;
}
