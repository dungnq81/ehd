
/** functions to urlencode the svg string */
@function str-replace($string, $search, $replace: '') {
    $index: str-index($string, $search);
    @if $index {
        @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
    }
    @return $string;
}

@function url-encode($string) {
    $map: (
            "%": "%25",
            "<": "%3C",
            ">": "%3E",
            " ": "%20",
            "!": "%21",
            "*": "%2A",
            "'": "%27",
            '"': "%22",
            "(": "%28",
            ")": "%29",
            ";": "%3B",
            ":": "%3A",
            "@": "%40",
            "&": "%26",
            "=": "%3D",
            "+": "%2B",
            "$": "%24",
            ",": "%2C",
            "/": "%2F",
            "?": "%3F",
            "#": "%23",
            "[": "%5B",
            "]": "%5D"
    );
    $new: $string;
    @each $search, $replace in $map {
        $new: str-replace($new, $search, $replace);
    }
    @return $new;
}

/** $string - svg */
@function inline-svg($string) {
    @return url('data:image/svg+xml;utf8,#{url-encode($string)}');
}

/** add unique id image url */
@function inline-image($url) {
    @return url("#{$url}?v=#{$unique_id}");
}

/** https://github.com/pentzzsolt/sass-is-int/blob/master/_is-int.scss */
@function is-int($value) {
    @if type-of($value) != number {
        //@warn '`#{$value}` is not a valid number!';
        @return null;
    }
    @return round($value) == $value;
}

/** https://webdesign.tutsplus.com/tutorials/an-introduction-to-error-handling-in-sass--cms-19996 */
@function throw($log: '') {
    @warn $log;
    @return false;
}

/** get breakpoint */
@function get-breakpoint($breakpoint, $mq-breakpoints) {
    @if map-has-key($mq-breakpoints, $breakpoint) {
        @return map-get($mq-breakpoints, $breakpoint);
    } @else {
        //@warn 'given `#{$breakpoint}` is not available in `#{$mq-breakpoints}`';
        //@return false;
        @return throw($log: 'given `#{$breakpoint}` is not available in `#{$mq-breakpoints}`');
    }
}

/** size */
@function fs($size: inherit) {
    @if false == $size {
        @warn '`#{$size}` is not a valid size!';
        @return null;
    } @else if inherit == $size or auto == $size or unit($size) == '%' {
        @return $size;
    } @else {
        @return rem-calc($size);
    }
}

/// Converts one or more pixel values into matching rem values.
///
/// @param {Number|List} $values - One or more values to convert. Be sure to separate them with spaces and not commas. If you need to convert a comma-separated list, wrap the list in parentheses.
/// @param {Number} $base [null] - The base value to use when calculating the `rem`. If you're using Foundation out of the box, this is 16px. If this parameter is `null`, the function will reference the `$global-font-size` variable as the base.
///
/// @returns {List} A list of converted values.
@function rem-calc($values, $base: null) {
    $rem-values: ();
    $count: length($values);

    // If no base is defined, defer to the global font size
    @if $base == null {
        $base: 100%;
    }

    // If the base font size is a %, then multiply it by 16px
    // This is because 100% font size = 16px in most all browsers
    @if unit($base) == '%' {
        $base: divide($base, 100%) * 16px;
    }

    // Using rem as base allows correct scaling
    @if unit($base) == 'rem' {
        $base: strip-unit($base) * 16px;
    }

    @if $count == 1 {
        @return -zf-to-rem($values, $base);
    }

    @for $i from 1 through $count {
        $rem-values: append($rem-values, -zf-to-rem(nth($values, $i), $base));
    }

    @return $rem-values;
}

/// Divide the given `$divident` by the given `$divisor`.
///
/// @param {Number} $divident - The divident.
/// @param {Number} $divisor - The divisor.
/// @param {Number} $precision - The precision decimals for the division.
///
/// @return {Number} The product of the division.
@function divide($dividend, $divisor, $precision: 12) {
    $sign: if($dividend > 0 and $divisor > 0 or $dividend < 0 and $divisor < 0, 1, -1);
    $dividend: abs($dividend);
    $divisor: abs($divisor);
    @if $dividend == 0 {
        @return 0;
    }
    @if $divisor == 0 {
        @error 'Cannot divide by 0';
    }
    $remainder: $dividend;
    $result: 0;
    $factor: 10;
    @while ($remainder > 0 and $precision >= 0) {
        $quotient: 0;
        @while ($remainder >= $divisor) {
            $remainder: $remainder - $divisor;
            $quotient: $quotient + 1;
        }
        $result: $result * 10 + $quotient;
        $factor: $factor * 0.1;
        $remainder: $remainder * 10;
        $precision: $precision - 1;
        @if ($precision < 0 and $remainder >= $divisor * 5) {
            $result: $result + 1;
        }
    }
    $result: $result * $factor * $sign;
    $dividend-unit: unit($dividend);
    $divisor-unit: unit($divisor);
    $unit-map: (
            'px': 1px,
            'rem': 1rem,
            'em': 1em,
            '%': 1%
    );
    @if ($dividend-unit != $divisor-unit and map-has-key($unit-map, $dividend-unit)) {
        $result: $result * map-get($unit-map, $dividend-unit);
    }

    @return $result;
}

/// Removes the unit (e.g. px, em, rem) from a value, returning the number only.
///
/// @param {Number} $num - Number to strip unit from.
///
/// @returns {Number} The same number, sans unit.
@function strip-unit($num) {
    @return divide($num, $num * 0 + 1);
}

$unit-warnings: true !default;

/// Converts a pixel value to matching rem value. *Any* value passed, regardless of unit, is assumed to be a pixel value. By default, the base pixel value used to calculate the rem value is taken from the `$global-font-size` variable.
/// @access private
///
/// @param {Number} $value - Pixel value to convert.
/// @param {Number} $base [null] - Base for pixel conversion.
///
/// @returns {Number} A number in rems, calculated based on the given value and the base pixel value. rem values are passed through as is.
@function -zf-to-rem($value, $base: null) {
    // Check if the value is a number
    @if type-of($value) != 'number' {
        @if $unit-warnings {
            @warn inspect($value) + ' was passed to rem-calc(), which is not a number.';
        }
        @return $value;
    }

    // Transform em into rem if someone hands over 'em's
    @if unit($value) == 'em' {
        $value: strip-unit($value) * 1rem;
    }

    // Calculate rem if units for $value is not rem or em
    @if unit($value) != 'rem' {
        $value: divide(strip-unit($value), strip-unit($base)) * 1rem;
    }

    // Turn 0rem into 0
    @if $value == 0rem {
        $value: 0;
    }

    @return $value;
}
