@use "sass:list";
@use "sass:math";

@import "variables";
@import "linear_gradient";

@mixin color-scheme($name) {
    @media (prefers-color-scheme: #{$name}) {
        @content;
    }
}

@mixin mq($breakpoint, $type: min) {
    $breakpoint-value: get-breakpoint($breakpoint, $mq-breakpoints);
    @if $breakpoint-value {
        @if $type == max {
            $breakpoint-value: #{$breakpoint-value - fs(0.02)};
        }
        @media only screen and (#{$type}-width: $breakpoint-value) {
            @content;
        }
    } @else {
        @warn 'Invalid breakpoint: `#{$breakpoint}`.';
    }
}

@mixin mq-min($breakpoint: sm) {
    @include mq($breakpoint, min) {
        @content;
    }
}

@mixin mq-max($breakpoint: sm) {
    @include mq($breakpoint, max) {
        @content;
    }
}

@mixin media-css($css_property: font-size, $m: $body-size, $t: false, $d: false) {
    @if type-of($m) != bool {
        #{$css_property}: fs($m);
    }
    @if type-of($t) != bool {
        @include mq-min(tablet) {
            #{$css_property}: fs($t);
        }
    }
    @if type-of($d) != bool {
        @include mq-min(desktop) {
            #{$css_property}: fs($d);
        }
    }
}

@mixin box($width: 300, $height: $width, $border_radius: false) {
    width: fs($width);
    height: fs($height);

    @if type-of($border_radius) != bool {
        border-radius: fs($border_radius);
    }
}

@mixin media-box($m: false, $t: false, $d: false, $border_radius: false) {
    @if type-of($m) != bool {
        @include box($m);
    }
    @if type-of($t) != bool {
        @include mq-min(tablet) {
            @include box($t);
        }
    }
    @if type-of($d) != bool {
        @include mq-min(desktop) {
            @include box($d);
        }
    }

    @if type-of($border_radius) != bool {
        border-radius: fs($border_radius);
    }
}

@mixin media-fs($m: $body-size, $t: false, $d: false) {
    @include media-css(font-size, $m, $t, $d);
}

@mixin media-padding($m: 20, $t: false, $d: false) {
    @include media-css(padding, $m, $t, $d);
}

@mixin media-pt($m: 20, $t: false, $d: false) {
    @include media-css(padding-top, $m, $t, $d);
}

@mixin media-pb($m: 20, $t: false, $d: false) {
    @include media-css(padding-bottom, $m, $t, $d);
}

@mixin media-pl($m: 20, $t: false, $d: false) {
    @include media-css(padding-left, $m, $t, $d);
}

@mixin media-pr($m: 20, $t: false, $d: false) {
    @include media-css(padding-right, $m, $t, $d);
}

@mixin media-margin($m: 20, $t: false, $d: false) {
    @include media-css(margin, $m, $t, $d);
}

@mixin media-mt($m: 20, $t: false, $d: false) {
    @include media-css(margin-top, $m, $t, $d);
}

@mixin media-mb($m: 20, $t: false, $d: false) {
    @include media-css(margin-bottom, $m, $t, $d);
}

@mixin media-ml($m: 20, $t: false, $d: false) {
    @include media-css(margin-left, $m, $t, $d);
}

@mixin media-mr($m: 20, $t: false, $d: false) {
    @include media-css(margin-right, $m, $t, $d);
}

@mixin gap($y: 20, $x: $y) {
    @if $x == $y and type-of($y) != bool {
        grid-gap: fs($y);
        gap: fs($y);
    } @else if $x != $y and type-of($x) != bool and type-of($y) != bool {
        grid-gap: fs($y) fs($x);
        gap: fs($y) fs($x);
    }
}

@mixin media-gap($m: 20, $t: false, $d: false) {
    @include gap($m);
    @if type-of($t) != bool {
        @include mq-min(tablet) {
            @include gap($t);
        }
    }
    @if type-of($d) != bool {
        @include mq-min(desktop) {
            @include gap($d);
        }
    }
}

@mixin fs-heading($heading: h1) {
    font-size: fs(map-get($font-sizes, $heading));
    @include mq-min(tablet) {
        font-size: fs(map-get($font-sizes-large, $heading));
    }
}

@mixin placeholder($color: #9a9a9a) {
    &::placeholder {
        color: $color;
    }
}

@mixin webkit-scrollbar($width: $scrollbar-w, $height: $scrollbar-h) {
    &::-webkit-scrollbar {
        @include box($width, $height);
    }
}

@mixin webkit-scrollbar-track($color: #e6e6e6) {
    &::-webkit-scrollbar-track {
        background-color: $color;
    }
}

@mixin webkit-scrollbar-thumb($color: #9a9a9a) {
    &::-webkit-scrollbar-thumb {
        background-color: $color;
    }
}

@mixin responsive-wrapper($width: 100%) {
    position: relative;
    display: block;
    overflow: hidden;
    transition: all 0.3s ease-in-out;

    @if type-of($width) != bool {
        width: fs($width);
    }

    & > img {
        display: block;
        @include absolute-center;
    }

    &:not(.auto) {
        & > img {
            height: 100% !important;
            width: 100%;
            max-width: unset;
            object-fit: cover;
            object-position: center;
        }
    }
}

@mixin responsive-image-auto {
    height: auto !important;
    width: auto !important;
    object-fit: contain;
    object-position: center;
    max-width: 100%;
    max-height: 100%;
}

@mixin responsive-scale($scale: 1.06, $opacity: 1) {
    transform: scale(1.0001);
    will-change: transform;
    transition: transform 0.8s cubic-bezier(0.25, 0.46, 0.45, 0.94), opacity 0.3s;

    &:hover {
        transform: scale($scale);
        opacity: $opacity;
    }
}

@mixin responsive-bg-ratio($ratio-width: 4, $ratio-height: 3) {
    background-size: cover;
    background-position: center;
    display: block;

    @supports (aspect-ratio: 1) {
        aspect-ratio: list.slash($ratio-width, $ratio-height);
    }

    @supports not (aspect-ratio: 1) {
        height: 0;
        padding-bottom: percentage(divide($ratio-height, $ratio-width));
    }
}

@mixin responsive-ratio($ratio-width: 3, $ratio-height: 2, $pseudo: false, $width_percent: 100%) {
    $padding: divide($width_percent * $ratio-height, $ratio-width);
    @if $pseudo {
        &::before {
            content: '';
            position: relative;
            width: fs($width_percent);
            padding-bottom: fs($padding);
        }
    } @else {
        @supports (aspect-ratio: 1) {
            aspect-ratio: list.slash($ratio-width, $ratio-height);
        }

        @supports not (aspect-ratio: 1) {
            height: 0;
            padding-bottom: fs($padding);
        }
    }
}

@mixin linear-gradient($angle: 90deg, $c: $primary, $amount: 12deg) {
    background-image: linear-gradient($angle, $c 0%, adjust-hue($c, $amount) 100%);
}

@mixin linear-gradient2($angle: 90deg, $c1: $primary, $c2: $secondary) {
    background-image: linear-gradient($angle, $c1 0%, $c2 100%);
}

@mixin gradient-text($angle: 135deg, $c: $primary, $amount: 12deg) {
    -webkit-text-fill-color: transparent;
    -webkit-background-clip: text;
    background-clip: text;
    color: transparent;
    display: inline-block;
    @include linear-gradient($angle, $c, $amount);
}

@mixin gradient-text2($angle: 135deg, $c1: $primary, $c2: $secondary) {
    -webkit-text-fill-color: transparent;
    -webkit-background-clip: text;
    background-clip: text;
    color: transparent;
    display: inline-block;
    @include linear-gradient($angle, $c1, $c1);
}

@mixin layout-container($padding_m: $gutter-xs, $padding: $gutter, $xxl: false, $xxxl: false) {
    margin-left: auto;
    margin-right: auto;

    &:not(.full) {

        @if is-int($padding_m) or unit($padding_m) == '%' {
            padding-left: fs($padding_m);
            padding-right: fs($padding_m);
        }

        // tablet breakpoint
        @if is-int($padding) or unit($padding) == '%' {
            @include mq-min(tablet) {
                padding-left: fs($padding);
                padding-right: fs($padding);
            }
        }

        // sm breakpoint
        @include mq-min(sm) {
            max-width: map-get($container-max-widths, sm);
        }

        // md breakpoint
        @include mq-min(md) {
            max-width: map-get($container-max-widths, md);
        }

        // lg breakpoint
        @include mq-min(lg) {
            max-width: map-get($container-max-widths, lg);
        }

        // xl breakpoint
        @include mq-min(xl) {
            max-width: map-get($container-max-widths, xl);
        }

        // xxl breakpoint
        @if true == $xxl {
            @include mq-min(xxl) {
                max-width: map-get($container-max-widths, xxl);
            }
        }

        // xxxl breakpoint
        @if true == $xxxl {
            @include mq-min(xxxl) {
                max-width: map-get($container-max-widths, xxxl);
            }
        }
    }
}

@mixin mx-gutter($m: $gutter-xs, $t: $gutter) {
    @if is-int($m) or unit($m) == '%' {
        margin-left: -#{fs($m)};
        margin-right: -#{fs($m)};
    }

    @if is-int($t) or unit($t) == '%' {
        @include mq-min(tablet) {
            @if 0 == $t {
                margin-left: 0;
                margin-right: 0;
            } @else {
                margin-left: -#{fs($t)};
                margin-right: -#{fs($t)};
            }
        }
    }
}

@mixin my-gutter($m: $gutter-xs, $t: $gutter) {
    @if is-int($m) or unit($m) == '%' {
        margin-top: -#{fs($m)};
        margin-bottom: -#{fs($m)};
    }

    @if is-int($t) or unit($t) == '%' {
        @include mq-min(tablet) {
            @if 0 == $t {
                margin-top: 0;
                margin-bottom: 0;
            } @else {
                margin-top: -#{fs($t)};
                margin-bottom: -#{fs($t)};
            }
        }
    }
}

@mixin px-gutter($m: $gutter-xs, $t: $gutter) {
    @if is-int($m) or unit($m) == '%' {
        padding-left: fs($m);
        padding-right: fs($m);
    }

    @if is-int($t) or unit($t) == '%' {
        @include mq-min(tablet) {
            padding-left: fs($t);
            padding-right: fs($t);
        }
    }
}

@mixin py-gutter($m: $gutter-xs, $t: $gutter) {
    @if is-int($m) or unit($m) == '%' {
        padding-top: fs($m);
        padding-bottom: fs($m);
    }

    @if is-int($t) or unit($t) == '%' {
        @include mq-min(tablet) {
            padding-top: fs($t);
            padding-bottom: fs($t);
        }
    }
}

@mixin line-clamp($n: 2, $value_fallback: ( false, false, false ), $attr_fallback: max-height) {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: initial;

    @supports (-webkit-line-clamp: $n) {
        -webkit-line-clamp: $n;
        -webkit-box-orient: vertical;
        display: -webkit-box;
    }

    @supports not (-webkit-line-clamp: $n) {
        $m: nth($value_fallback, 1);
        $t: nth($value_fallback, 2);
        $d: nth($value_fallback, 3);
        @include media-css($attr_fallback, $m, $t, $d);
    }
}

@mixin hover-color($c1: $primary, $c2: $c1, $text-decoration: false) {
    color: $c1;
    &:hover {
        color: $c2;
        @if false == $text-decoration {
            text-decoration: none;
        }
    }
}

@mixin hover-svg($c1: $primary, $c2: $c1) {
    fill: $c1;
    &:hover {
        fill: $c2;
    }
}

@mixin underline($color: $primary, $height: 1px, $width: 100%, $left: 0, $bottom: 0) {
    position: relative;
    display: inline-block;
    &::before {
        content: "";
        display: inline-block;
        @include box($width, $height);
        position: absolute;
        bottom: fs($bottom);
        left: fs($left);
        background-color: $color;
        transform-origin: right center;
        transform: scaleX(0);
        transition: transform 0.2s cubic-bezier(1, 0, 0, 1);
    }
    &:hover {
        &::before {
            transform-origin: left center;
            transform: scaleX(1);
        }
    }
}

@mixin list-reset($margin: 0, $padding: 0) {
    margin: fs($margin);
    padding: fs($padding);
    list-style: none;
}

@mixin hidden-text {
    border: 0;
    clip: rect(1px, 1px, 1px, 1px);
    clip-path: inset(50%);
    height: 1px;
    margin: -1px;
    overflow: hidden;
    padding: 0;
    position: absolute;
    width: 1px;
    word-wrap: normal !important;
}

@mixin centering-self($width: 300, $height: $width) {
    @include box($width, $height);
    position: absolute;
    top: subtract(50%, fs(divide($height, 2)));
    left: subtract(50%, fs(divide($width, 2)));
}

@mixin fixed-center {
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
}

/// @link http://www.sitepoint.com/centering-with-sass/ Centering With Sass
@mixin vertical-center {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
}

// @link http://www.sitepoint.com/centering-with-sass/ Centering With Sass
@mixin horizontal-center {
    position: absolute;
    left: 50%;
    transform: translateX(-50%);
}

// @link http://www.sitepoint.com/centering-with-sass/ Centering With Sass
@mixin absolute-center {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
}

@mixin absolute-full {
    left: 0;
    top: 0;
    bottom: 0;
    right: 0;
    position: absolute;
}

@mixin fixed-full {
    left: 0;
    top: 0;
    bottom: 0;
    right: 0;
    position: fixed;
}

// @link http://nicolasgallagher.com/micro-clearfix-hack/ Micro Clearfix Hack
// @link http://danisadesigner.com/blog/flexbox-clear-fix-pseudo-elements/ Flexbox fix
@mixin clearfix {
    &::before, &::after {
        display: table;
        content: '';

        $global-flexbox: true;
        @if $global-flexbox {
            flex-basis: 0;
            order: 1;
        }
    }

    &::after {
        clear: both;
    }
}

// @param {Color} $color [$black] - Color to use for the icon.
// @param {Color} $color-hover [$dark-gray] - Color to use when the icon is hovered over.
// @param {Number} $width [20px] - Width of the icon.
// @param {Number} $height [16px] - Height of the icon.
// @param {Number} $weight [2px] - Height of individual bars in the icon.
// @param {Number} $bars [3] - Number of bars in the icon.
@mixin hamburger(
    $color: $body-color,
    $color-hover: $gray-900,
    $width: 20px,
    $height: 16px,
    $weight: 2px,
    $bars: 3
) {
    // box-shadow CSS output
    $shadow: ();
    $hover-shadow: ();

    // Spacing between bars is calculated based on the total height of the icon and the weight of each bar
    $spacing: divide($height - ($weight * $bars), $bars - 1);

    @if unit($spacing) == 'px' {
        $spacing: floor($spacing);
    }

    @for $i from 2 through $bars {
        $offset: ($weight + $spacing) * ($i - 1);
        $shadow: append($shadow, 0 $offset 0 $color, comma);
    }

    // Icon container
    position: relative;
    display: inline-block;
    vertical-align: middle;
    @include box($width, $height);
    cursor: pointer;

    // Icon bars
    &::after {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        display: block;
        @include box(100%, $weight);
        background: $color;
        box-shadow: $shadow;
    }

    // Hover state
    @if $color-hover {
        // Generate CSS
        @for $i from 2 through $bars {
            $offset: ($weight + $spacing) * ($i - 1);
            $hover-shadow: append($hover-shadow, 0 $offset 0 $color-hover, comma);
        }

        &:hover::after {
            background: $color-hover;
            box-shadow: $hover-shadow;
        }
    }
}

/** keyframes */
@mixin keyframes($name) {
    @-webkit-keyframes #{$name} {
        @content;
    }
    @-moz-keyframes #{$name} {
        @content;
    }
    @keyframes #{$name} {
        @content;
    }
}

/** add unique id image url */
$unique-id: unique_id();
@function inline-image($url) {
    @return url("#{$url}?v=#{$unique-id}");
}