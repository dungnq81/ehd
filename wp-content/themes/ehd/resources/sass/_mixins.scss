@use "sass:list";
@use "sass:math";

@import "settings";
@import "linear-gradient";

@mixin mq($breakpoint, $type: min) {
    $breakpoint-value: get-breakpoint($breakpoint, $mq-breakpoints);
    @if $breakpoint-value {
        @if $type == max {
            $breakpoint-value: #{$breakpoint-value - fs(0.5)};

        }
        @media only screen and (#{$type}-width: $breakpoint-value) {
            @content;
        }
    } @else {
        @warn 'Invalid breakpoint: `#{$breakpoint}`.';
    }
}

@mixin mq-min($breakpoint: desktop) {
    @include mq($breakpoint, min) {
        @content;
    }
}

@mixin mq-max($breakpoint: mobile) {
    @include mq($breakpoint, max) {
        @content;
    }
}

@mixin media-css($css_property: font-size, $m: 16, $t: false, $d: false) {
    @if false != $m {
        #{$css_property}: fs($m);
    }
    @if false != $t {
        @include mq-min(mobile) {
            #{$css_property}: fs($t);
        }
    }
    @if false != $d {
        @include mq-min(desktop) {
            #{$css_property}: fs($d);
        }
    }
}

@mixin box($width: 300, $height: $width, $border_radius: 0) {

    width: fs($width);
    height: fs($height);

    $border_radius: abs($border_radius);
    @if 0 < $border_radius {
        border-radius: fs($border_radius);
    }
}

@mixin media-box($m: 150, $t: false, $d: false, $border_radius: 0) {
    @if false != $m {
        @include box($m);
    }
    @if false != $t {
        @include mq-min(mobile) {
            @include box($t);
        }
    }
    @if false != $d {
        @include mq-min(desktop) {
            @include box($d);
        }
    }

    $border_radius: abs($border_radius);
    @if 0 < $border_radius {
        border-radius: fs($border_radius);
    }
}

@mixin media-fs($m: 16, $t: false, $d: false) {
    @include media-css(font-size, $m, $t, $d);
}

@mixin media-padding($m: 20, $t: false, $d: false) {
    @include media-css(padding, $m, $t, $d);
}

@mixin media-pt($m: 20, $t: false, $d: false) {
    @include media-css(padding-top, $m, $t, $d);
}

@mixin media-pb($m: 20, $t: false, $d: false) {
    @include media-css(padding-bottom, $m, $t, $d);
}

@mixin media-pl($m: 20, $t: false, $d: false) {
    @include media-css(padding-left, $m, $t, $d);
}

@mixin media-pr($m: 30, $t: false, $d: false) {
    @include media-css(padding-right, $m, $t, $d);
}

@mixin media-margin($m: 20, $t: false, $d: false) {
    @include media-css(margin, $m, $t, $d);
}

@mixin media-mt($m: 20, $t: false, $d: false) {
    @include media-css(margin-top, $m, $t, $d);
}

@mixin media-mb($m: 20, $t: false, $d: false) {
    @include media-css(margin-bottom, $m, $t, $d);
}

@mixin media-ml($m: 20, $t: false, $d: false) {
    @include media-css(margin-left, $m, $t, $d);
}

@mixin media-mr($m: 20, $t: false, $d: false) {
    @include media-css(margin-right, $m, $t, $d);
}

@mixin fs-heading($heading: h1) {
    font-size: fs(map-get($header-styles-small, $heading));
    @include mq-min(mobile) {
        font-size: fs(map-get($header-styles-medium, $heading));
    }
}

@mixin placeholder($color: #9a9a9a) {
    &::placeholder {
        color: $color;
    }
}

@mixin webkit-scrollbar($width: $scrollbar-with, $height: $scrollbar-height) {
    &::-webkit-scrollbar {
        @include box($width, $height);
    }
}

@mixin webkit-scrollbar-track($bg_color: #e6e6e6) {
    &::-webkit-scrollbar-track {
        background-color: $bg_color;
    }
}

@mixin webkit-scrollbar-thumb($bg_color: #9a9a9a) {
    &::-webkit-scrollbar-thumb {
        background-color: $bg_color;
    }
}

@mixin responsive-bg-ratio($ratio-width: 4, $ratio-height: 3) {
    background-size: cover;
    background-position: center;
    display: block;

    @supports (aspect-ratio: 1) {
        aspect-ratio: list.slash($ratio-width, $ratio-height);
    }

    @supports not (aspect-ratio: 1) {
        height: 0;
        padding-bottom: percentage(divide($ratio-height, $ratio-width));
    }
}

@mixin responsive-wrapper($width: 100%) {

    position: relative;
    display: block;
    overflow: hidden;
    transition: all 0.3s ease-in-out;
    width: $width;
    & > img {
        display: block;
        height: 100% !important;
        width: auto;
        min-width: 100%;
        max-width: unset;
        object-fit: cover;
        object-position: center;
        @include absolute-center;
    }
}

@mixin responsive-scale($scale: 1.06, $opacity: 0.95) {
    transform: scale(1.0001);
    will-change: transform;
    transition: transform 0.8s cubic-bezier(0.25, 0.46, 0.45, 0.94), opacity 0.3s;
    &:hover {
        transform: scale($scale);
        opacity: $opacity;
    }
}

@mixin responsive-image-auto {
    height: auto !important;
    width: auto !important;
    object-fit: contain;
    max-width: 100%;
    max-height: 100%;
    min-width: 70%;
    min-height: 70%;
}

@mixin responsive-ratio($ratio-width: 3, $ratio-height: 2, $pseudo: false, $width_percent: 100%) {
    $padding: divide($width_percent * $ratio-height, $ratio-width);
    @if $pseudo {
        &::before {
            content: '';
            position: relative;
            width: $width_percent;
            padding-bottom: $padding;
        }
    } @else {

        @supports (aspect-ratio: 1) {
            aspect-ratio: list.slash($ratio-width, $ratio-height);
        }

        @supports not (aspect-ratio: 1) {
            height: 0;
            padding-bottom: $padding;
        }
    }
}

@mixin linear-gradient($angle: 90deg, $c: $color1, $amount: 12deg) {
    background-image: linear-gradient($angle, $c 0%, adjust-hue($c, $amount) 100%);
}

@mixin linear-gradient2($angle: 90deg, $c1: $color1, $c2: $color2) {
    background-image: linear-gradient($angle, $c1 0%, $c2 100%);
}

@mixin gradient-text($angle: 135deg, $c: $color1, $amount: 12deg) {
    -webkit-text-fill-color: transparent;
    -webkit-background-clip: text;
    background-clip: text;
    color: transparent;
    display: inline-block;
    @include linear-gradient($angle, $c, $amount);
}

@mixin gradient-text2($angle: 135deg, $c1: $color1, $c2: $color2) {
    -webkit-text-fill-color: transparent;
    -webkit-background-clip: text;
    background-clip: text;
    color: transparent;
    display: inline-block;
    @include linear-gradient($angle, $c1, $c1);
}

@mixin flex-self($total_n: 1, $self_n: 1, $gap: 0) {
    @if $gap < 0 {
        $gap: abs($gap);
    }

    @if is-int($total_n) and is-int($self_n) and $self_n > 0 {

        @if $total_n == $self_n {
            width: percentage(1);
        } @else if $gap == 0 and $total_n > $self_n {
            width: percentage(divide($self_n, $total_n));
        } @else if $gap > 0 and $total_n > $self_n {

            // support aspect-ratio tag
            @supports (aspect-ratio: 1) or (grid-gap: 1rem) {
                width: calc(#{percentage(divide($self_n, $total_n))} - #{fs(($total_n - $self_n) * divide($gap, $total_n))});
            }

            // not support aspect-ratio tag, there will also skip the gap
            @supports not ((aspect-ratio: 1) and (grid-gap: 1rem)) {
                width: percentage(divide($self_n, $total_n));
                padding: fs(divide($gap, 2));
            }
        }
    }
}

@mixin media-flex-self($m: 1, $t: false, $d: false, $gap_m: 0, $gap: 0) {
    @if is-int($m) and $m > 0 {
        @include flex-self($m, 1, $gap_m);
    }

    @if is-int($t) and $t > 0 {
        @include mq-min(mobile) {
            @include flex-self($t, 1, $gap);
        }
    }

    @if is-int($d) and $d > 0 {
        @include mq-min(desktop) {
            @include flex-self($d, 1, $gap);
        }
    }
}

@mixin media-gap($gap_m: 0, $gap: 0) {
    $gap_m: abs($gap_m);
    $gap: abs($gap);

    // support aspect-ratio tag, there will also be support flex gap tag
    @supports (aspect-ratio: 1) or (grid-gap: 1rem) {
        @if $gap_m > 0 {
            grid-gap: fs($gap_m);
            gap: fs($gap_m);
        }
        @if $gap > 0 {
            @include mq-min(mobile) {
                grid-gap: fs($gap);
                gap: fs($gap);
            }
        }
    }

    // you just need to check if old Safari really doesn't support such css tag
    @supports not ((aspect-ratio: 1) and (grid-gap: 1rem)) {
        $gutter_m: divide($gap_m, 2);
        $gutter: divide($gap, 2);

        grid-gap: 0; // reset
        gap: 0;
        @include mx-gutter($gutter_m, $gutter);
        @include my-gutter($gutter_m, $gutter);
    }
}

@mixin flex-grid($m: 1, $t: false, $d: false, $gap_m: 0, $gap: 0, $class_cell: '.cell') {
    @include media-gap($gap_m, $gap);

    & > #{unquote($class_cell)} {
        @if '.cell' != $class_cell {
            @include cell(false);
        }

        @include media-flex-self($m, $t, $d, $gap_m, $gap);
    }
}

@mixin mx-gutter($gutter_m: 10, $gutter: 15) {
    $gutter_m: abs($gutter_m);
    $gutter: abs($gutter);

    @if $gutter_m > 0 {
        margin-left: -#{fs($gutter_m)};
        margin-right: -#{fs($gutter_m)};
    }

    @if $gutter > 0 {
        @include mq-min(mobile) {
            margin-left: -#{fs($gutter)};
            margin-right: -#{fs($gutter)};
        }
    }
}

@mixin my-gutter($gutter_m: 10, $gutter: 15) {
    $gutter_m: abs($gutter_m);
    $gutter: abs($gutter);

    @if $gutter_m > 0 {
        margin-top: -#{fs($gutter_m)};
        margin-bottom: -#{fs($gutter_m)};
    }

    @if $gutter > 0 {
        @include mq-min(mobile) {
            margin-top: -#{fs($gutter)};
            margin-bottom: -#{fs($gutter)};
        }
    }
}

@mixin px-gutter($gutter_m: 10, $gutter: 15) {
    $gutter_m: abs($gutter_m);
    $gutter: abs($gutter);

    @if $gutter_m > 0 {
        padding-left: fs($gutter_m);
        padding-right: fs($gutter_m);
    }
    @if $gutter > 0 {
        @include mq-min(mobile) {
            padding-left: fs($gutter);
            padding-right: fs($gutter);
        }
    }
}

@mixin py-gutter($gutter_m: 10, $gutter: 15) {
    $gutter_m: abs($gutter_m);
    $gutter: abs($gutter);

    @if $gutter_m > 0 {
        padding-top: fs($gutter_m);
        padding-bottom: fs($gutter_m);
    }
    @if $gutter > 0 {
        @include mq-min(mobile) {
            padding-top: fs($gutter);
            padding-bottom: fs($gutter);
        }
    }
}

@mixin cell($width: 100%) {
    flex: 0 0 auto;
    min-height: 0;
    min-width: 0;

    $width: abs($width);
    @if 0 != $width {
        width: $width;
    }
}

@mixin grid-container($padding_m: 10, $padding: 15, $grid_extra: false, $widescreen: false) {
    max-width: $global-screen;
    margin-left: auto;
    margin-right: auto;

    $padding_m: abs($padding_m);
    $padding: abs($padding);

    @if $padding_m > 0 {
        padding-left: fs($padding_m);
        padding-right: fs($padding_m);
    }
    @if $padding > 0 {
        @include mq-min(mobile) {
            padding-left: fs($padding);
            padding-right: fs($padding);
        }
    }

    @if true == $grid_extra {
        @include mq-min(xxdesktop) {
            max-width: $global-screen-large;
        }
    }

    @if $widescreen == true {
        @include mq-min(xxxdesktop) {
            max-width: 100%;
            padding-left: fs(165 + $gutter);
            padding-right: fs(165 + $gutter);
        }
    }

    &:not(.full) {
        @include mq-max(xxdesktop) {
            max-width: $global-screen-medium;
        }
    }
}

@mixin grid-x {
    display: flex;
    flex-flow: row wrap;
}

@mixin grid-y {
    display: flex;
    flex-flow: column nowrap;
}

@mixin grid-padding-x($padding_m: 10, $padding: 15, $class_cell: '.cell') {
    //@include mx-gutter($padding_m, $padding);
    & > #{unquote($class_cell)} {
        @if '.cell' != $class_cell {
            @include cell();
        }

        @include px-gutter($padding_m, $padding);
    }
}

@mixin grid-padding-y($padding_m: 10, $padding: 15, $class_cell: '.cell') {
    //@include my-gutter($padding_m, $padding);
    & > #{unquote($class_cell)} {
        @if '.cell' != $class_cell {
            @include cell();
        }
        @include py-gutter($padding_m, $padding);
    }
}

@mixin line-clamp($n: 2, $value_fallback: ( false, false, false ), $attr_fallback: max-height) {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: initial;

    @supports (-webkit-line-clamp: $n) {
        -webkit-line-clamp: $n;
        -webkit-box-orient: vertical;
        display: -webkit-box;
    }

    @supports not (-webkit-line-clamp: $n) {
        $m: nth($value_fallback, 1);
        $t: nth($value_fallback, 2);
        $d: nth($value_fallback, 3);
        @include media-css($attr_fallback, $m, $t, $d);
    }
}

@mixin right-fullwidth($padding_m: 10, $padding: 15, $grid_extra: false) {
    margin: 0 0 0 auto;
    max-width: calc(50% + #{divide($global-screen, 2)});

    $padding_m: abs($padding_m);
    $padding: abs($padding);
    @if $padding_m > 0 {
        padding-left: fs($padding_m);
    }

    @if $padding > 0 {
        @include mq-min(mobile) {
            padding-left: fs($padding);
        }
    }

    @if true == $grid_extra {
        @include mq-min(xxdesktop) {
            max-width: calc(50% + #{divide($global-screen-large, 2)});
        }
    }

    @include mq-max(xxdesktop) {
        max-width: calc(50% + #{divide($global-screen-medium, 2)});
    }
}

@mixin left-fullwidth($padding_m: 10, $padding: 15, $grid_extra: false) {
    margin: 0 auto 0 0;
    max-width: calc(50% + #{divide($global-screen, 2)});

    $padding_m: abs($padding_m);
    $padding: abs($padding);
    @if $padding_m > 0 {
        padding-right: fs($padding_m);
    }

    @if $padding > 0 {
        @include mq-min(mobile) {
            padding-right: fs($padding);
        }
    }

    @if true == $grid_extra {
        @include mq-min(xxdesktop) {
            max-width: calc(50% + #{divide($global-screen-large, 2)});
        }
    }

    @include mq-max(xxdesktop) {
        max-width: calc(50% + #{divide($global-screen-medium, 2)});
    }
}

/** padding-left, padding-right, left, right ... */
@mixin position-screen($css_property: padding-left, $gutter_m: 10, $gutter: 15, $grid_extra: false) {
    $_property: abs($gutter_m);
    #{$css_property}: fs($_property);

    @include mq-min(mobile) {
        $_property: abs($gutter);
        #{$css_property}: fs($_property);
    }

    @media only screen and (min-width: $global-screen-medium) {
        $_property: calc(50vw - #{divide($global-screen-medium, 2)} + #{fs($gutter)});
        #{$css_property}: $_property;
    }

    @if true == $grid_extra {
        @include mq-min(xxdesktop) {
            $_property: calc(50vw - #{divide($global-screen-large, 2)} + #{fs($gutter)});
            #{$css_property}: $_property;
        }
    } @else {
        @include mq-min(xxdesktop) {
            $_property: calc(50vw - #{divide($global-screen, 2)} + #{fs($gutter)});
            #{$css_property}: $_property;
        }
    }
}

@mixin flex-align-center {
    display: flex;
    align-items: center;
}

@mixin flex-center {
    display: flex;
    align-items: center;
    justify-content: center;
}

@mixin inline-flex-center {
    display: inline-flex;
    align-items: center;
    justify-content: center;
}

@mixin flex-shrink {
    flex: 0 0 auto;
    max-width: 100%;
}

@mixin flex-auto {
    flex: 1 1 0;
    min-width: 0;
}

@mixin hover-color($c1: $color1, $c2: $c1, $text-decoration: false) {
    color: $c1;
    &:hover {
        color: $c2;
        @if $text-decoration == false {
            text-decoration: none;
        } @else {
            text-decoration: underline;
        }
    }
}

@mixin hover-svg($c1: $color1, $c2: $c1) {
    fill: $c1;
    &:hover {
        fill: $c2;
    }
}

@mixin underline($color: #9a9a9a, $height: 1px, $width: 100%, $left: 0, $bottom: 0) {
    position: relative;
    display: inline-block;
    &::before {
        content: "";
        display: inline-block;
        width: $width;
        height: $height;
        position: absolute;
        bottom: $bottom;
        left: $left;
        background-color: $color;
        transform-origin: right center;
        transform: scaleX(0);
        transition: transform 0.2s cubic-bezier(1, 0, 0, 1);
    }
    &:hover {
        &::before {
            transform-origin: left center;
            transform: scaleX(1);
        }
    }
}

@mixin button-arrow($width: 16, $height: $width, $color: #fff) {
    overflow-wrap: break-word;
    &::after {
        content: '';
        display: inline-block;
        margin: 0 0 0 10px;
        @include box($width, $height);
        background-image: inline-svg('<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" style="fill:#{$color};"><path d="m11.293 17.293 1.414 1.414L19.414 12l-6.707-6.707-1.414 1.414L15.586 11H6v2h9.586z"></path></svg>');
        vertical-align: -10%;
    }
}

@mixin button-scale($scale: 0.98) {
    transition: all .3s ease-out .07s;
    &:hover {
        transition: all .3s ease-out .07s;
        transform: scale($scale);
    }
}

//@mixin hardware($backface: true, $perspective: 1000) {
//    @if $backface {
//        backface-visibility: hidden;
//    }
//    transform: translate3d(0, 0, 0);
//    perspective: $perspective;
//}

@mixin list-reset($margin: 0, $padding: 0) {
    margin: $margin;
    padding: $padding;
    list-style: none;
}

@mixin hidden-text {
    border: 0;
    clip: rect(0, 0, 0, 0);
    height: 1px;
    width: 1px;
    margin: -1px;
    overflow: hidden;
    padding: 0;
    position: absolute;
    top: -10000em;
}

@mixin centering-self($width: 300, $height: $width) {
    @include box($width, $height);
    position: absolute;
    top: calc(50% - #{fs(divide($height, 2))});
    left: calc(50% - #{fs(divide($width, 2))});
}

@mixin fixed-center {
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
}

/// @link http://www.sitepoint.com/centering-with-sass/ Centering With Sass
@mixin vertical-center {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
}

// @link http://www.sitepoint.com/centering-with-sass/ Centering With Sass
@mixin horizontal-center {
    position: absolute;
    left: 50%;
    transform: translateX(-50%);
}

// @link http://www.sitepoint.com/centering-with-sass/ Centering With Sass
@mixin absolute-center {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
}

@mixin absolute-full {
    left: 0;
    top: 0;
    bottom: 0;
    right: 0;
    position: absolute;
}

@mixin fixed-full {
    left: 0;
    top: 0;
    bottom: 0;
    right: 0;
    position: fixed;
}

// @link http://nicolasgallagher.com/micro-clearfix-hack/ Micro Clearfix Hack
// @link http://danisadesigner.com/blog/flexbox-clear-fix-pseudo-elements/ Flexbox fix
@mixin clearfix {
    &::before, &::after {
        display: table;
        content: ' ';

        $global-flexbox: true;
        @if $global-flexbox {
            flex-basis: 0;
            order: 1;
        }
    }

    &::after {
        clear: both;
    }
}

// @param {Color} $color [$black] - Color to use for the icon.
// @param {Color} $color-hover [$dark-gray] - Color to use when the icon is hovered over.
// @param {Number} $width [20px] - Width of the icon.
// @param {Number} $height [16px] - Height of the icon.
// @param {Number} $weight [2px] - Height of individual bars in the icon.
// @param {Number} $bars [3] - Number of bars in the icon.
@mixin hamburger(
    $color: $header-color,
    $color-hover: #8a8a8a,
    $width: 20px,
    $height: 16px,
    $weight: 2px,
    $bars: 3
) {
    // box-shadow CSS output
    $shadow: ();
    $hover-shadow: ();

    // Spacing between bars is calculated based on the total height of the icon and the weight of each bar
    $spacing: divide($height - ($weight * $bars), $bars - 1);

    @if unit($spacing) == 'px' {
        $spacing: floor($spacing);
    }

    @for $i from 2 through $bars {
        $offset: ($weight + $spacing) * ($i - 1);
        $shadow: append($shadow, 0 $offset 0 $color, comma);
    }

    // Icon container
    position: relative;
    display: inline-block;
    vertical-align: middle;
    width: $width;
    height: $height;
    cursor: pointer;

    // Icon bars
    &::after {
        position: absolute;
        top: 0;
        left: 0;

        display: block;
        width: 100%;
        height: $weight;

        background: $color;
        box-shadow: $shadow;

        content: '';
    }

    // Hover state
    @if $color-hover {
        // Generate CSS
        @for $i from 2 through $bars {
            $offset: ($weight + $spacing) * ($i - 1);
            $hover-shadow: append($hover-shadow, 0 $offset 0 $color-hover, comma);
        }

        &:hover::after {
            background: $color-hover;
            box-shadow: $hover-shadow;
        }
    }
}

// http://el.commonsupport.com/newwp/autorex/services-2/
@mixin _effect1($c1: $color1, $c2: $color2) {
    box-shadow: 0 0 0 2.5em $c1 inset;
    background-color: transparent;
    transition: all 300ms ease;
    color: $c2;
    &:hover {
        box-shadow: 0 0 0 0 $c1 inset, 0 3px 10px rgb(0 0 0 / 30%);
        color: $c1;
        background-color: $c2;
    }
}

// http://el.commonsupport.com/newwp/autorex/services-2/
@mixin _effect2($border_radius: 0, $c: #000000, $opacity_hover: 0.15) {
    position: relative;
    border-radius: fs($border_radius);
    &::before {
        position: absolute;
        left: 0;
        top: 0;
        height: 100%;
        width: 0;
        content: "";
        background-color: $c;
        transition: 0.5s;
        opacity: 0;
        border-radius: fs($border_radius);
    }
    &:hover {
        &::before {
            width: 100%;
            opacity: $opacity_hover;
        }
    }
}

// http://el.commonsupport.com/newwp/autorex/services-2/
@mixin _effect3($bg_color: rgba(255, 255, 255, 0.2), $border: 0) {

    $border-radius: abs($border);
    @if 0 < $border-radius {
        border-radius: fs($border-radius);
    }

    position: relative;
    overflow: hidden;
    &::before {
        @include absolute-center;
        display: block;
        content: "";
        width: 0;
        height: 0;
        background: $bg_color;
        opacity: 0;
        z-index: 10;

        @if 0 < $border-radius {
            border-radius: fs($border-radius);
        }
    }

    &:hover {
        opacity: 1;

        &::before {
            animation: circle 0.75s;
        }
    }
}

/** */
@mixin keyframes($name) {
    @-webkit-keyframes #{$name} {
        @content;
    }
    @-moz-keyframes #{$name} {
        @content;
    }
    @keyframes #{$name} {
        @content;
    }
}
